int pirValue;         // Current state of the button
                     // (LOW is pressed b/c i'm using the pullup resistors)
long millis_held;    // How long the button was held (milliseconds)
long secs_held;      // How long the button was held (seconds)
long prev_secs_held; // How long the button was held in the previous check
byte previous = HIGH;
unsigned long firstTime; // how long since the button was first pressed 


void loop() {
  pirValue = digitalRead(PIRPIN); //read state of the PIR

  // if the button state changes to pressed, remember the start time 
  if (pirValue == LOW && previous == HIGH && (millis() - firstTime) > 100) {
    motionStatus = "detected"; //set motionStatus to detected
    firstTime = millis();
    sendBedState();
  }
  
  else if(pirValue == HIGH && previous == LOW) {
    motionStatus = "standby";
    sendBedState();
  }

  millis_held = (millis() - firstTime);
  secs_held = millis_held / 1000;

  // This if statement is a basic debouncing tool, the button must be pushed for at least
  // 100 milliseconds in a row for it to be considered as a push.
  if (millis_held > 50) {

    // check if the button was released since we last checked
    if (pirValue == HIGH && previous == LOW) {
      // HERE YOU WOULD ADD VARIOUS ACTIONS AND TIMES FOR YOUR OWN CODE
      // ===============================================================================

      // Button held for 1-3 seconds, print out some info
      if (secs_held >= 2) {
        Serial.print("It Works!!! Seconds held: ");
        Serial.print(secs_held);
        Serial.print("   Milliseconds held: ");
        Serial.println(millis_held);
      }
      // ===============================================================================
    }
  }

  previous = current;
  prev_secs_held = secs_held;
}
